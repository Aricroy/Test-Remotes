
-- Metadata
meta.id = "Test.UTF8"
meta.name = "Test UTF8 Library"
meta.author = "Test"

local utf8 = libs.utf8;
local server = libs.server;

local s = "å1ä2ö3";

actions.raw = function ()
	local r = utf8.new("hello world åäö"):raw();
	server.update({ id = "info", text = r });
end

actions.newlen = function ()
	local r = utf8.new("hello world åäö", 5):raw();
	server.update({ id = "info", text = r });
end

------------------------------------------------------------

actions.startswith = function ()
	local r = utf8.startswith(s, "å1");
	assert(r);
	server.update({id = "info", text = r });
end

actions.startswith_bad = function ()
	local r = utf8.startswith(s, "å2");
	assert(not r);
	server.update({id = "info", text = r });
end

------------------------------------------------------------

actions.endswith = function ()
	local r = utf8.endswith(s, "ö3");
	assert(r);
	server.update({id = "info", text = r });
end

actions.endswith_bad = function ()
	local r = utf8.endswith(s, "ö4");
	assert(not r);
	server.update({id = "info", text = r });
end

------------------------------------------------------------

actions.iequals = function ()
	local r = utf8.iequals(s, "Å1Ä2Ö3");
	assert(r);
	server.update({id = "info", text = r });
end

actions.iequals_bad = function ()
	local r = utf8.iequals(s, "Å1Ä2Å3");
	assert(not r);
	server.update({id = "info", text = r });
end

------------------------------------------------------------

actions.equals = function ()
	local r = utf8.equals(s, "å1ä2ö3");
	assert(r);
	server.update({id = "info", text = r });
end

actions.equals_bad = function ()
	local r = utf8.equals(s, "å1Ä2ö3");
	assert(not r);
	server.update({id = "info", text = r });
end

------------------------------------------------------------

actions.sub2 = function ()
	local r = utf8.sub(s, 2);
	assert(r == "ä2ö3");
	server.update({id = "info", text = r });
end

actions.sub3 = function ()
	local r = utf8.sub(s, 3, 2);
	assert(r == "2ö");
	server.update({id = "info", text = r });
end

actions.sub_bad_start = function ()
	local r = utf8.sub(s, 999);
	assert(r == "");
	server.update({id = "info", text = r });
end

actions.sub_bad_len = function ()
	local r = utf8.sub(s, 0, 999);
	assert(r == s);
	server.update({id = "info", text = r });
end

actions.sub_bad = function ()
	local r = utf8.sub(s, 999, 999);
	assert(r == "");
	server.update({id = "info", text = r });
end

------------------------------------------------------------

actions.char = function ()
	local r = utf8.char(s, 2);
	assert(r == "ä");
	server.update({id = "info", text = r });
end

actions.char_bad = function ()
	local r = utf8.char(s, -2);
	assert(r == nil);
	server.update({id = "info", text = r });
end

------------------------------------------------------------

actions.len = function ()
	local r = utf8.len(s);
	assert(r == 6);
	server.update({id = "info", text = r });
end

------------------------------------------------------------

actions.indexof = function ()
	local r = utf8.indexof("å1ö2å3ö", "ö");
	assert(r == 2);
	server.update({id = "info", text = r });
end

------------------------------------------------------------

actions.lastindexof = function ()
	local r = utf8.lastindexof("å1ö2å3ö", "ö");
	assert(r == 6);
	server.update({id = "info", text = r });
end

------------------------------------------------------------

actions.replace = function ()
	local r = utf8.replace(s, "ö", "p");
	assert(r == "å1ä2p3");
	server.update({id = "info", text = r });
end

------------------------------------------------------------

actions.contains = function ()
	local r = utf8.contains(s, "ä2");
	assert(r);
	server.update({id = "info", text = r });
end

------------------------------------------------------------

actions.contains_bad = function ()
	local r = utf8.contains(s, "ä3");
	assert(not r);
	server.update({id = "info", text = r });
end

------------------------------------------------------------

actions.trim = function ()
	local r = utf8.trim(" ö ö ö ");
	assert(r == "ö ö ö");
	server.update({id = "info", text = r });
end

------------------------------------------------------------

actions.tolower = function ()
	local r = utf8.tolower("Å1Ä2Ö3");
	assert(r == "å1ä2ö3");
	server.update({id = "info", text = r });
end

actions.toupper = function ()
	local r = utf8.toupper("å1ä2ö3");
	assert(r == "Å1Ä2Ö3");
	server.update({id = "info", text = r });
end

------------------------------------------------------------

actions.split1 = function ()
	local s = "a;b;c";
	local a = utf8.split(s, ";");
	local r = libs.data.tojson(a);
	server.update("info", "text", r);
	
	assert(s == utf8.join(";", a));
end

actions.split2 = function ()
	local s = "hello åxö world åxö abc";
	local a = utf8.split(s, "åxö", true);
	local r = libs.data.tojson(a);
	server.update("info", "text", r);
	
	local r = utf8.join("åxö", a);
	assert(s == r);
end

actions.join1 = function ()
	local r = utf8.join(",", "a", "b", "c");
	assert(r == "a,b,c");
	server.update({id = "info", text = r });
end

actions.join2 = function ()

end

------------------

actions.empty = function ()
	local r = utf8.empty("");
	server.update({id = "info", text = r });
end

actions.empty_no = function ()
	local r = utf8.empty("asdf");
	server.update({id = "info", text = r });
end

